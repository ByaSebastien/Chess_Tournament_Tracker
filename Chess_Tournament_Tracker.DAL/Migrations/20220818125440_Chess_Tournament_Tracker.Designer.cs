// <auto-generated />
using System;
using Chess_Tournament_Tracker.DAL.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Chess_Tournament_Tracker.DAL.Migrations
{
    [DbContext(typeof(TournamentContext))]
    [Migration("20220818125440_Chess_Tournament_Tracker")]
    partial class Chess_Tournament_Tracker
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Chess_Tournament_Tracker.Models.Entities.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BlackId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Result")
                        .HasColumnType("int");

                    b.Property<int>("Round")
                        .HasColumnType("int");

                    b.Property<Guid>("TournamentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WhiteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BlackId");

                    b.HasIndex("TournamentId");

                    b.HasIndex("WhiteId");

                    b.ToTable("Game");
                });

            modelBuilder.Entity("Chess_Tournament_Tracker.Models.Entities.Tournament", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentRound")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndInscription")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsWomenOnly")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MaxELO")
                        .HasColumnType("int");

                    b.Property<int>("MaxPlayer")
                        .HasColumnType("int");

                    b.Property<int?>("MinELO")
                        .HasColumnType("int");

                    b.Property<int>("MinPlayer")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Tournaments");

                    b.HasCheckConstraint("CK_NumberPlayer", "MinPlayer <= MaxPlayer");
                });

            modelBuilder.Entity("Chess_Tournament_Tracker.Models.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Birthate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ELO")
                        .HasColumnType("int");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pseudo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("Salt")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Mail")
                        .IsUnique();

                    b.HasIndex("Pseudo")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TournamentUser", b =>
                {
                    b.Property<Guid>("TournamentsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TournamentsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("TournamentUser");
                });

            modelBuilder.Entity("Chess_Tournament_Tracker.Models.Entities.Game", b =>
                {
                    b.HasOne("Chess_Tournament_Tracker.Models.Entities.User", "Black")
                        .WithMany("GamesAsBlack")
                        .HasForeignKey("BlackId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Chess_Tournament_Tracker.Models.Entities.Tournament", "CurrentTournament")
                        .WithMany("Games")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Chess_Tournament_Tracker.Models.Entities.User", "White")
                        .WithMany("GamesAsWhite")
                        .HasForeignKey("WhiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Black");

                    b.Navigation("CurrentTournament");

                    b.Navigation("White");
                });

            modelBuilder.Entity("TournamentUser", b =>
                {
                    b.HasOne("Chess_Tournament_Tracker.Models.Entities.Tournament", null)
                        .WithMany()
                        .HasForeignKey("TournamentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Chess_Tournament_Tracker.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Chess_Tournament_Tracker.Models.Entities.Tournament", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("Chess_Tournament_Tracker.Models.Entities.User", b =>
                {
                    b.Navigation("GamesAsBlack");

                    b.Navigation("GamesAsWhite");
                });
#pragma warning restore 612, 618
        }
    }
}
